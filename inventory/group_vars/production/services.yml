---
services:
  lanragi_artbooks:
    host: "oni.lan"
    port: 8000
    version: "v.0.8.90"
  homeassistant:
    host: "oni.lan"
    port: 8001
    version: "2023.7"
  shoko:
    host: "oni.lan"
    port: 8004
    version: "daily"
  betanin:
    host: "oni.lan"
    port: 8005
    version: "v0.4.0"
  komga:
    host: "oni.lan"
    port: 8006
    version: "1.1.0"
  kanboard:
    host: "oni.lan"
    port: 8008
    version: "v1.2.32"
  jellyfin:
    host: "hashihime.lan"
    port: 8096

jellyfin_nginx_custom_http: |
  # Log format for stripping api_key
  log_format stripsecrets '$remote_addr $host - $remote_user [$time_local] '
                      '"$secretfilter" $status $body_bytes_sent '
                      '$request_length $request_time $upstream_response_time '
                      '"$http_referer" "$http_user_agent"';

  map $request $secretfilter {
      ~*^(?<prefix1>.*[\?&]api_key=)([^&]*)(?<suffix1>.*)$  "${prefix1}***$suffix1";
      default                                               $request;
  }

  # Set in-memory cache-metadata size in keys_zone, size of video caching and how many days a cached object should persist
  proxy_cache_path /var/cache/nginx/jellyfin-videos levels=1:2 keys_zone=jellyfin-videos:100m inactive=90d max_size=75g;
  map $request_uri $h264Level { ~(h264-level=)(.+?)& $2; }
  map $request_uri $h264Profile { ~(h264-profile=)(.+?)& $2; }

  # image cache
  proxy_cache_path /var/cache/nginx/jellyfin-images levels=1:2 keys_zone=jellyfin:100m max_size=15g inactive=30d use_temp_path=off;

  limit_conn_zone $binary_remote_addr zone=addr:10m;

jellyfin_nginx_custom_server: |
  add_header X-Frame-Options "SAMEORIGIN";
  add_header X-XSS-Protection "0"; # Do NOT enable. This is obsolete/dangerous
  add_header X-Content-Type-Options "nosniff";

  # COOP/COEP. Disable if you use external plugins/images/assets
  add_header Cross-Origin-Opener-Policy "same-origin" always;
  add_header Cross-Origin-Embedder-Policy "require-corp" always;
  add_header Cross-Origin-Resource-Policy "same-origin" always;

  # Permissions policy. May cause issues on some clients
  add_header Permissions-Policy "accelerometer=(), ambient-light-sensor=(), battery=(), bluetooth=(), camera=(), clipboard-read=(), display-capture=(), document-domain=(), encrypted-media=(), gamepad=(), geolocation=(), gyroscope=(), hid=(), idle-detection=(), interest-cohort=(), keyboard-map=(), local-fonts=(), magnetometer=(), microphone=(), payment=(), publickey-credentials-get=(), serial=(), sync-xhr=(), usb=(), xr-spatial-tracking=()" always;

  # Tell browsers to use per-origin process isolation
  add_header Origin-Agent-Cluster "?1" always;

  add_header Content-Security-Policy "default-src https: data: blob: http://image.tmdb.org; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com/cv/js/sender/v1/cast_sender.js https://www.gstatic.com/eureka/clank/95/cast_sender.js https://www.gstatic.com/eureka/clank/96/cast_sender.js https://www.gstatic.com/eureka/clank/97/cast_sender.js https://www.youtube.com blob:; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'";

  location = / {
    return 302 http://$host/web/;
  }

  # location block for /web - This is purely for aesthetics so /web/#!/ works instead of having to go to /web/index.html/#!/
  location = /web/ {
      # Proxy main Jellyfin traffic
      proxy_pass http://{{ services.jellyfin.host }}:{{ services.jellyfin.port }}/web/index.html;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Protocol $scheme;
      proxy_set_header X-Forwarded-Host $http_host;
  }

  location /socket {
      # Proxy Jellyfin Websockets traffic
      proxy_pass http://{{ services.jellyfin.host }}:{{ services.jellyfin.port }};
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Protocol $scheme;
      proxy_set_header X-Forwarded-Host $http_host;
  }

  access_log /var/log/nginx/access.log stripsecrets;

  # Cache videos
  location ~* ^/Videos/(.*)/(?!live) {
    # Set size of a slice (this amount will be always requested from the backend by nginx)
    # Higher value means more latency, lower more overhead
    # This size is independent of the size clients/browsers can request
    slice 2m;

    proxy_cache jellyfin-videos;
    proxy_cache_valid 200 206 301 302 30d;
    proxy_ignore_headers Expires Cache-Control Set-Cookie X-Accel-Expires;
    proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
    proxy_connect_timeout 15s;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    # Transmit slice range to the backend
    proxy_set_header Range $slice_range;

    # This saves bandwidth between the proxy and jellyfin, as a file is only downloaded one time instead of multiple times when multiple clients want to at the same time
    # The first client will trigger the download, the other clients will have to wait until the slice is cached
    # Esp. practical during SyncPlay
    proxy_cache_lock on;
    proxy_cache_lock_age 60s;

    proxy_pass http://{{ services.jellyfin.host }}:{{ services.jellyfin.port }};
    proxy_cache_key "jellyvideo$uri?MediaSourceId=$arg_MediaSourceId&VideoCodec=$arg_VideoCodec&AudioCodec=$arg_AudioCodec&AudioStreamIndex=$arg_AudioStreamIndex&VideoBitrate=$arg_VideoBitrate&AudioBitrate=$arg_AudioBitrate&SubtitleMethod=$arg_SubtitleMethod&TranscodingMaxAudioChannels=$arg_TranscodingMaxAudioChannels&RequireAvc=$arg_RequireAvc&SegmentContainer=$arg_SegmentContainer&MinSegments=$arg_MinSegments&BreakOnNonKeyFrames=$arg_BreakOnNonKeyFrames&h264-profile=$h264Profile&h264-level=$h264Level&slicerange=$slice_range";

    # add_header X-Cache-Status $upstream_cache_status; # This is only for debugging cache

  }

  # Cache images
  location ~ /Items/(.*)/Images {
    proxy_pass http://{{ services.jellyfin.host }}:{{ services.jellyfin.port }};
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Protocol $scheme;
    proxy_set_header X-Forwarded-Host $http_host;

    proxy_cache jellyfin;
    proxy_cache_revalidate on;
    proxy_cache_lock on;
    # add_header X-Cache-Status $upstream_cache_status; # This is only to check if cache is working
  }

  # Download rate limiting
  location ~ /Items/(.*)/Download$ {
    proxy_pass http://{{ services.jellyfin.host }}:{{ services.jellyfin.port }};
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Protocol $scheme;
    proxy_set_header X-Forwarded-Host $http_host;

    limit_rate 12500k; # Speed limit (here is on kb/s)
    limit_conn addr 3; # Number of simultaneous downloads per IP
    limit_conn_status 460; # Custom error handling
    proxy_buffering on; # Be sure buffering is on (it is by default on nginx), otherwise limits won't work
  }

remote_services:
  kanboard:
    host: "oni.lan"
    port: 8008
  shoko:
    host: "oni.lan"
    port: 8004

vaultwarden:
  host: "oni.lan"
  port: 8007
  ws_port: 3012
  version: "1.29.0"
